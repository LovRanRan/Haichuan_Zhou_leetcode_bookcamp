class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        # If reaching the end of a branch or finding one of the targets
        if root is None or root == p or root == q:
            return root

        # Search in left and right subtrees
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)

        # If both left and right are not None, current root is the LCA
        if left is not None and right is not None:
            return root

        # If only one side is not None, return that side
        return left if left is not None else right
