class Solution:
    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
        if source == target:
            return 0
        
        # Map each stop to the list of buses (routes) that go through it
        stop_to_buses = defaultdict(set)
        for bus, stops in enumerate(routes):
            for stop in stops:
                stop_to_buses[stop].add(bus)
        
        # Initialize BFS
        visited_stops = set([source])
        visited_buses = set()
        queue = deque([(source, 0)])  # (current stop, buses taken)
        
        while queue:
            current_stop, buses_taken = queue.popleft()
            
            if current_stop == target:
                return buses_taken
            
            for bus in stop_to_buses[current_stop]:
                if bus in visited_buses:
                    continue
                
                visited_buses.add(bus)
                for stop in routes[bus]:
                    if stop not in visited_stops:
                        visited_stops.add(stop)
                        queue.append((stop, buses_taken + 1))
        
        return -1
    
        
