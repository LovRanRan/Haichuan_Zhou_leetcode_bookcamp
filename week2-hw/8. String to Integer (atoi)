class Solution:
    def myAtoi(self, s: str) -> int:
       
        i, n, result = 0, len(s), 0
        INT_MAX, INT_MIN = 2**31 - 1, -2**31
        
        # Step 1: Skip leading whitespaces
        while i < n and s[i] == ' ':
            i += 1
        
        # If we've reached the end after skipping spaces, return 0
        if i == n:
            return 0
        
        # Step 2: Check for a sign
        sign = -1 if s[i] == '-' else 1
        if s[i] in ['-', '+']:
            i += 1
        
        # Step 3: Read and convert digits
        while i < n and s[i].isdigit():
            digit = int(s[i])
            
            # Before adding the digit, check for overflow/underflow
            if result > INT_MAX // 10 or (result == INT_MAX // 10 and digit > INT_MAX % 10):
                return INT_MAX if sign == 1 else INT_MIN
            
            result = result * 10 + digit
            i += 1
        
        return sign * result
